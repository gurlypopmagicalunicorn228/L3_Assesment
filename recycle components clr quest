import random
from tkinter import *
from functools import partial  # to prevent unwanted windows
import csv


# helper functions go here
def get_colours():
    """
    retrieves colours from the cvs list
    """
    file = open("00_colour_list_hex_v3.csv", "r")
    all_colors = list(csv.reader(file, delimiter=","))
    file.close()

    # remove first row
    all_colors.pop(0)
    return all_colors


def get_round_colours():
    """
    choose 4 colours from larger list ensuring scores are all different
    """
    all_colour_list = get_colours()

    round_colours = []
    colour_scores = []

    # loop until 4 different scores
    while len(round_colours) < 4:
        potential_colour = random.choice(all_colour_list)
        # colour scores are read as str
        # change to integer
        if potential_colour[1] not in colour_scores:
            round_colours.append(potential_colour)

            # make score an integer
            colour_scores.append(potential_colour[1])

    # change scores to integers
    int_scores = [int(x) for x in colour_scores]

    # get median score / target score
    int_scores.sort()
    median = (int_scores[1] + int_scores[2]) / 2
    median = round_ans(median)
    highest = int_scores[-1]
    return round_colours, median, highest


def round_ans(val):
    """
    round the final answer to the nearest integer
    """
    var_rounded = (val * 2 + 1) // 2
    raw_rounded = "{:.0f}".format(var_rounded)
    return int(raw_rounded)


# class starts here
class StartGame:
    """
    Initial game interface - asks user how many rounds they want to play
    """

    def __init__(self):
        # gets number of rounds from the user
        self.start_frame = Frame(padx=10, pady=10)
        self.start_frame.grid()

        self.play_button = Button(self.start_frame,
                                  font=("Arial", "16", "bold"),
                                  text="Play", bg="#CC6600",
                                  fg="#FFFFFF", width=10, command=self.check_rounds)
        self.play_button.grid(row=0, column=2)

    def check_rounds(self):
        """
        checks if user entered more than 1 rounds
        """
        Play(5)
        # hide root window
        root.withdraw()


class Play:
    """
    interface for colour quest
    """

    def __init__(self, how_many):
        # integers / str variables
        self.target_score = IntVar()

        # rounds played - starts with 0
        self.rounds_played = IntVar()
        self.rounds_played.set(0)

        self.rounds_wanted = IntVar()
        self.rounds_wanted.set(how_many)

        # colour and score list
        self.round_colour_list = []
        self.all_scores_list = []
        self.all_high_score_list = []

        self.play_box = Toplevel()

        self.game_frame = Frame(self.play_box)
        self.game_frame.grid(padx=10, pady=10)

        # body font for most labels
        body_font = ("Arial", "12")

        # list for label details
        play_labels_list = [
            ["Round # of #", ("Arial", "16", "bold"), None, 0],
            ["Score to Beat: #", body_font, "#FFF2CC", 1],
            ["choose colour below. good luck.", body_font, "#d5e8d4", 2],


        ]

        play_labels_ref = []
        for item in play_labels_list:
            self.make_label = Label(self.game_frame, text=item[0], font=item[1],
                                    bg=item[2], wraplength=300, justify="left")
            self.make_label.grid(row=item[3], pady=10, padx=10)

            play_labels_ref.append(self.make_label)

        # retrieve labels for later use
        self.heading_label = play_labels_ref[0]
        self.target_label = play_labels_ref[1]
        self.results_label = play_labels_ref[3]

        # set up colour buttons
        self.colour_frame = Frame(self.game_frame)
        self.colour_frame.grid(row=3)

        self.colour_button_ref = []
        self.button_colour_list = []

        # create 4 buttons 2 by 2
        for item in range(0, 4):
            self.colour_button = Button(self.colour_frame, font=("Arial", "12"),
                                        text="Colour Name", width=15,
                                        command=partial(self.round_results, item))
            self.colour_button.grid(row=item // 2,
                                    column=item % 2,
                                    padx=5, pady=5)
            self.colour_button_ref.append(self.colour_button)

        # frame to hold hints and stats
        self.hints_stats_frame = Frame(self.game_frame)
        self.hints_stats_frame.grid(row=6)

        # list for buttons :( (Frame| txt| bg| command| width| row| column)
        control_button_list = [
            [self.game_frame, "Next Round", "#0057d8", self.new_round, 21, 5, None],
            [self.hints_stats_frame, "Hints", "#ff8000", "", 10, 0, 0],
            [self.hints_stats_frame, "Stats", "#333333", "", 10, 0, 1],
            [self.game_frame, "End", "#990000", self.close_play, 21, 7, None]
        ]

        # create buttons and add to list
        control_ref_list = []
        for item in control_button_list:
            make_control_button = Button(item[0], text=item[1], bg=item[2],
                                         command=item[3], font=("Arial", "16", "bold"),
                                         fg="#ffffff", width=item[4])
            make_control_button.grid(row=item[5], column=item[6], padx=5, pady=5)
            control_ref_list.append(make_control_button)

        # retrieve next, stat and end button, so they can be configured
        self.next_button = control_ref_list[0]
        self.stats_button = control_ref_list[2]
        self.end_game_button = control_ref_list[3]

        # once interface created, invoke new
        # round function for first round
        self.new_round()

    def new_round(self):
        """
        choose 4 colours works out median for score to beat
        """
        # retrieve number of rounds played add one to it and configure
        rounds_played = self.rounds_played.get()
        rounds_played += 1
        self.rounds_played.set(rounds_played)

        rounds_wanted = self.rounds_wanted.get()
        # set target score as median for comparison

        # get round colours and median
        self.round_colour_list, median, highest = get_round_colours()

        self.target_score.set(median)

        self.all_high_score_list.append(highest)
        # update heading, score, beat labels. hide result label
        self.heading_label.config(text=f"Round {rounds_played} of {rounds_wanted}")
        self.target_label.config(text=f"Target Score: {median}", font=("Arial", "14", "bold"))
        self.results_label.config(text=f"{'=' * 7}", bg="#f0f0f0")

        # configure buttons with foregrounds and bg colour
        # enable colour buttons
        for count, item in enumerate(self.colour_button_ref):
            item.config(fg=self.round_colour_list[count][2],
                        bg=self.round_colour_list[count][0],
                        text=self.round_colour_list[count][0], state=NORMAL)
        self.next_button.config(state=DISABLED)

    def round_results(self, user_choice):
        """
        retrieves which button was pushed (index 0-3)
        retrieves score, compares it with median,
        updates results and adds it to stat list
        """
        # get user score and colour on button press
        score = int(self.round_colour_list[user_choice][1])

        # alternate way to get button name.
        colour_name = self.colour_button_ref[user_choice].cget('text')

        # retrieve target score and compare with user score to find round result
        target = self.target_score.get()

        if score >= target:
            result_text = f"Success! {colour_name} earned you {score} points"
            result_bg = "#82b366"
            self.all_scores_list.append(score)

        else:
            result_text = f"Oops, {colour_name} ({score}) is less than set target"
            result_bg = "#F8CECC"
            self.all_scores_list.append(0)
        self.results_label.config(text=result_text, bg=result_bg)

        print("all scores", self.all_scores_list)
        print("highest score", self.all_high_score_list)

        # enable stats and hints button, disable colour buttons
        self.next_button.config(state=NORMAL)
        self.stats_button.config(state=NORMAL)

        # check to see if game is over
        rounds_played = self.rounds_played.get()
        rounds_wanted = self.rounds_wanted.get()

        if rounds_played == rounds_wanted:
            self.next_button.config(state=DISABLED, text="Game over")
            self.end_game_button.config(text="play again", bg="#006600")

        for item in self.colour_button_ref:
            item.config(state=DISABLED)

    def close_play(self):
        # reshow root and end current game
        root.deiconify()
        self.play_box.destroy()


# main_routine goes here
if __name__ == "__main__":
    root = Tk()
    root.title("Colour Quest")
    StartGame()
    root.mainloop()
