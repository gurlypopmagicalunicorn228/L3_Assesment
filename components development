from tkinter import *
from functools import partial  # to prevent unwanted windows


def get_round_symbol():
    """
    choose 4 symbol from larger list ensuring scores are all different
    """


class StartGame:
    """
    Initial game interface - asks user how many rounds they want to play
    """

    def __init__(self):
        # gets number of rounds from the user
        self.start_frame = Frame(padx=10, pady=10, bg="#FFCC99")
        self.start_frame.grid()

        # str for labels
        intro_string = ("Welcome to Periodic Table Quiz. Please type in the number of rounds you would like to play "
                        "below in order to start the game.")
        # make sure it asks to choose a number more than zero
        choose_string = "Please select a number >0"

        # Button list  (text|font|fg)
        start_label_list = [
            ["Periodic Table Quiz", ("Helvetica", "26", "bold", "italic"), None],
            [intro_string, ("Helvetica", "13", "italic"), None],
            [choose_string, ("Arial", "12"), "#009900"],
        ]

        # create labels and add them to the reference list
        start_label_ref = []
        for count, item in enumerate(start_label_list):
            make_label = Label(self.start_frame, text=item[0], font=item[1],
                               wraplength=350, justify="left", pady=10, padx=10, bg="#FFCC99")
            make_label.grid(row=count)
            start_label_ref.append(make_label)
        # extract choice label, so it can be changed
        # to an error message if needed.
        self.choose_label = start_label_ref[2]
        # frame for entry box, so it can be in the same row with button
        self.entry_area_frame = Frame(self.start_frame, bg="#FFCC99")
        self.entry_area_frame.grid(row=3)
        self.num_rounds_entry = Entry(self.entry_area_frame,
                                      font=("Arial", "20", "bold"), width=10)
        self.num_rounds_entry.grid(row=0, column=0, padx=0, pady=0)

        self.play_button = Button(self.entry_area_frame,
                                  font=("Arial", "16", "bold"),
                                  text="Play", bg="#CC6600",
                                  fg="#FFFFFF", width=8, command=self.check_rounds)
        self.play_button.grid(row=0, column=1)

        # frame to hold info and endless mode
        self.info_frame = Frame(self.entry_area_frame, bg="#FFCC99")
        self.info_frame.grid(row=6)

        self.endless_frame = Frame(self.entry_area_frame, bg="#FFCC99")
        self.endless_frame.grid(row=6, column=1)

        # list for buttons :( (Frame| txt| bg| command| width| row| column)

    def check_rounds(self):
        # retrieve symbols to be converted
        rounds_wanted = self.num_rounds_entry.get()

        # reset label and entry box when user return to screen
        self.choose_label.config(fg="#009900", font=("Arial", "12", "bold"))
        self.num_rounds_entry.config(bg="#FFCC99")

        error = "oopsie, choose a WHOLE number more than ZERO"
        has_errors = "no"

        # check that amount to be converted is whole number above kelvin zero
        try:
            rounds_wanted = int(rounds_wanted)
            if rounds_wanted > 0:
                # invoke play class
                Play(rounds_wanted)
                # hide root window
                root.withdraw()

            else:
                has_errors = "yes"
        except ValueError:
            has_errors = "yes"

        # display error if necessary
        if has_errors == "yes":
            self.choose_label.config(text=error, fg="#990000", font=("Arial", "10", "bold"))
            self.num_rounds_entry.config(bg="#f4cccc")
            self.num_rounds_entry.delete(0, END)


class Play:
    """
    interface for periodic table quiz
    """

    def __init__(self, how_many):
        self.play_box = Toplevel()

        # integers / str variables
        self.target_score = IntVar()

        # rounds played - starts with 0
        self.rounds_played = IntVar()
        self.rounds_played.set(0)

        self.rounds_wanted = IntVar()
        self.rounds_wanted.set(how_many)
        # symbol and score list
        self.round_symbol_list = []
        self.all_scores_list = []
        self.all_high_score_list = []

        self.game_frame = Frame(self.play_box, bg="#FFCC99")
        self.game_frame.grid(padx=10, pady=10)
        # body font for most labels
        body_font = ("Arial", "12")

        # list for label details
        play_labels_list = [
            ["Round # of #", ("Arial", "16", "bold"), "#FFF5EE", 0],
            ["What Symbol is #?", ("Arial", "15"), "#FFF5EE", 1],
            ['You chose, results', body_font, "#d5e8d4", 4]

        ]
        play_labels_ref = []
        for item in play_labels_list:
            self.make_label = Label(self.game_frame, text=item[0], font=item[1],
                                    bg=item[2], wraplength=300, justify="left")
            self.make_label.grid(row=item[3], pady=10, padx=10)

            play_labels_ref.append(self.make_label)

        # set up symbol buttons
        self.symbol_frame = Frame(self.game_frame, bg="#FFCC99")
        self.symbol_frame.grid(row=3)

        self.symbol_button_ref = []
        self.button_symbol_list = []

        # retrieve labels for later use
        self.heading_label = play_labels_ref[0]
        self.results_label = play_labels_ref[2]

        # create 9 buttons 3 by 3
        for item in range(0, 9):
            self.symbol_button = Button(self.symbol_frame, font=("Arial", "12"),
                                        text="Element Symbol", width=15, bg="#F8CECC",
                                        command=partial(self.round_result, item)
                                        )
            self.symbol_button.grid(row=item // 3,
                                    column=item % 2,
                                    padx=5, pady=5)
            self.symbol_button_ref.append(self.symbol_button)

            # frame to hold hints and stats
        self.hints_stats_frame = Frame(self.game_frame, bg="#FFCC99")
        self.hints_stats_frame.grid(row=7)

        # list for buttons :( (Frame| txt| bg| command| width| row| column)
        control_button_list = [

            [self.game_frame, "Next Round", "#EA6B66", "", 21, 5, None],
            [self.game_frame, "Bonus Round", "#0057d8", "", 21, 6, None],
            [self.hints_stats_frame, "Hints", "#6D8764", "", 10, 7, 0],
            [self.hints_stats_frame, "Stats", "#647687", "", 10, 7, 1],
            [self.game_frame, "End", "#990000", self.close_play, 21, 8, None]
        ]
        # create buttons and add to list
        control_ref_list = []
        for item in control_button_list:
            make_control_button = Button(item[0], text=item[1], bg=item[2],
                                         command=item[3], font=("Arial", "16", "bold"),
                                         fg="#ffffff", width=item[4])
            make_control_button.grid(row=item[5], column=item[6], padx=5, pady=5)
            control_ref_list.append(make_control_button)
        # retrieve next, stat and end button, so they can be configured
        self.next_button = control_ref_list[0]
        self.stats_button = control_ref_list[2]
        self.end_game_button = control_ref_list[3]

        self.game_heading_label = Label(self.game_frame, text=f"Round 0 of {how_many}",
                                        font=("Arial", "16", "bold"), bg="#FFF5EE")
        self.game_heading_label.grid(row=0)

        # once interface created, invoke new
        # round function for first round
        self.new_round()

    def new_round(self):
        """
        choose if chosen answer was correct, adds a point/keeps same score
        :return:
        """
        # retrieve number of rounds played add one to it and configure
        rounds_played = self.rounds_played.get()
        rounds_played += 1
        self.rounds_played.set(rounds_played)

        rounds_wanted = self.rounds_wanted.get()
        self.round_symbol_list = get_round_symbol()

        # update heading, score, beat labels. hide result label
        self.heading_label.config(text=f"Round {rounds_played} of {rounds_wanted}")
        # self.results_label.config(text=f"{'=' * 7}", bg="#f0f0f0")

        # configure buttons with foregrounds and bg colour
        # enable symbol buttons
        self.results_label.config(text=f"{'=' * 7}", bg="#f0f0f0")

    def round_result(self, user_choice):
        """
        retrieves which button was pushed (index 0-3)
        retrieves score, compares it with median,
        updates results and adds it to stat list
        """
        # get user score and colour on button press
        score = int(self.round_symbol_list[user_choice][2])

        # alternate way to get button name.
        symbol_name = self.symbol_button_ref[user_choice].cget('text')
        if score >= 1:
            result_text = f"Success! {symbol_name} earned you {score} points"
            result_bg = "#82b366"
            self.all_scores_list.append(score)
        else:
            result_text = f"Oops, {symbol_name} ({score}) is less than set target"
            result_bg = "#F8CECC"
            self.all_scores_list.append(0)
        self.results_label.config(text=result_text, bg=result_bg)

    def close_play(self):
        # reshow root and end current game
        root.deiconify()
        self.play_box.destroy()


# main_routine goes here
if __name__ == "__main__":
    root = Tk()
    root.title("Periodic Table Quiz")
    StartGame()
    root.mainloop()
