import random
from tkinter import *
from functools import partial  # to prevent unwanted windows
import csv


# helper functions go here
def get_colours():
    """
    retrieves colours from the cvs list
    """
    file = open("00_colour_list_hex_v3.csv", "r")
    all_colors = list(csv.reader(file, delimiter=","))
    file.close()

    # remove first row
    all_colors.pop(0)
    return all_colors


def get_round_colours():
    """
    choose 4 colours from larger list ensuring scores are all different
    """
    all_colour_list = get_colours()

    round_colours = []
    colour_scores = []

    # loop until 4 different scores
    while len(round_colours) < 4:
        potential_colour = random.choice(all_colour_list)
        # colour scores are read as str
        # change to integer
        if potential_colour[1] not in colour_scores:
            round_colours.append(potential_colour)

            # make score an integer
            colour_scores.append(potential_colour[1])

    # change scores to integers
    int_scores = [int(x) for x in colour_scores]

    # get median score / target score
    int_scores.sort()

    median = (int_scores[1] + int_scores[2]) / 2
    median = round_ans(median)

    highest = int_scores[-1]

    return round_colours, median, highest


def round_ans(val):
    """
    round the final answer to the nearest integer
    """
    var_rounded = (val * 2 + 1) // 2
    raw_rounded = "{:.0f}".format(var_rounded)
    return int(raw_rounded)


# class starts here
class StartGame:
    """
    Initial game interface - asks user how many rounds they want to play
    """

    def __init__(self):
        # gets number of rounds from the user
        self.start_frame = Frame(padx=10, pady=10)
        self.start_frame.grid()

        # str for labels
        intro_string = ("In each round you will be asked to choose a colour. Your goal is to"
                        "beat the target score and win the round, keep your points")
        # make sure it asks to choose a number more than zero
        choose_string = "choose how many rounds you would like to play"

        # Button list  (text|font|fg)
        start_label_list = [
            ["Colour Quest", ("Arial", "16", "bold"), None],
            [intro_string, ("Arial", "12"), None],
            [choose_string, ("Arial", "12"), "#009900"],
        ]
        # create labels and add them to the reference list

        start_label_ref = []

        for count, item in enumerate(start_label_list):
            make_label = Label(self.start_frame, text=item[0], font=item[1],
                               wraplength=350, justify="left", pady=10, padx=20)
            make_label.grid(row=count)
            start_label_ref.append(make_label)

        # extract choice label, so it can be changed
        # to an error message if needed.

        self.choose_label = start_label_ref[2]

        # frame for entry box, so it can be in the same row with button
        self.entry_area_frame = Frame(self.start_frame)
        self.entry_area_frame.grid(row=3)

        self.num_rounds_entry = Entry(self.entry_area_frame,
                                      font=("Arial", 20, "bold"), width=10)
        self.num_rounds_entry.grid(row=0, column=1, padx=10, pady=10)

        self.play_button = Button(self.entry_area_frame,
                                  font=("Arial", 16, "bold"),
                                  text="Play", bg="#CC6600",
                                  fg="#FFFFFF", command=self.check_rounds)
        self.play_button.grid(row=0, column=2)

    def check_rounds(self):
        # retrieve colours to be converted
        rounds_wanted = self.num_rounds_entry.get()

        # reset label and entry box when user return to screen
        self.choose_label.config(fg="#009900", font=("Arial", 12, "bold"))
        self.num_rounds_entry.config(bg="#ffffff")

        error = "oopsie doopsie choose a WHOLE number more than ZERO"
        has_errors = "no"

        # check that amount to be converted is whole number above kelvin zero
        try:
            rounds_wanted = int(rounds_wanted)
            if rounds_wanted > 0:
                # invoke play class
                self.num_rounds_entry.delete(0, END)
                self.choose_label.config(text="How many rounds would you like to play?")
                Play(rounds_wanted)
                # hide root window
                root.withdraw()

            else:
                has_errors = "yes"
        except ValueError:
            has_errors = "yes"

        # display error if necessary
        if has_errors == "yes":
            self.choose_label.config(text=error, fg="#990000", font=("Arial", "10", "bold"))
            self.num_rounds_entry.config(bg="#f4cccc")
            self.num_rounds_entry.delete(0, END)


class Play:
    """
    interface for colour quest
    """

    def __init__(self, how_many):
        # integers / str variables
        self.target_score = IntVar()

        # rounds played - starts with 0
        self.rounds_played = IntVar()
        self.rounds_played.set(0)

        self.rounds_wanted = IntVar()
        self.rounds_wanted.set(how_many)
        self.rounds_won = IntVar()

        # colour and score list
        self.round_colour_list = []
        self.all_scores_list = []
        self.highest_score_list = []

        self.play_box = Toplevel()

        self.game_frame = Frame(self.play_box)
        self.game_frame.grid(padx=10, pady=10)

        # if user presses x , entire game ends
        self.play_box.protocol('WM_DELETE_WINDOW', root.destroy)

        # body font for most labels
        body_font = ("Arial", "12")

        # list for label details
        play_labels_list = [
            ["Round # of #", ("Arial", "16", "bold"), None, 0],
            ["Score to Beat: #", body_font, "#FFF2CC", 1],
            ["choose colour below. good luck.", body_font, "#d5e8d4", 2],
            ['You chose, results', body_font, "#d5e8d4", 4]
        ]

        play_labels_ref = []
        for item in play_labels_list:
            self.make_label = Label(self.game_frame, text=item[0], font=item[1],
                                    bg=item[2], wraplength=300, justify="left")
            self.make_label.grid(row=item[3], pady=10, padx=10)

            play_labels_ref.append(self.make_label)

        # retrieve labels for later use
        self.heading_label = play_labels_ref[0]
        self.target_label = play_labels_ref[1]
        self.choose_label = play_labels_ref[2]
        self.results_label = play_labels_ref[3]

        # set up colour buttons
        self.colour_frame = Frame(self.game_frame)
        self.colour_frame.grid(row=3)

        self.colour_button_ref = []
        self.button_colour_list = []

        # create 4 buttons 2 by 2
        for item in range(0, 4):
            self.colour_button = Button(self.colour_frame, font=("Arial", 12),
                                        text="Colour Name", width=15,
                                        command=partial(self.round_results, item))
            self.colour_button.grid(row=item // 2,
                                    column=item % 2,
                                    padx=5, pady=5)
            self.colour_button_ref.append(self.colour_button)

        # frame to hold hints and stats
        self.hints_stats_frame = Frame(self.game_frame)
        self.hints_stats_frame.grid(row=6)

        # list for buttons :( (Frame| txt| bg| command| width| row| column)
        control_button_list = [
            [self.game_frame, "Next Round", "#0057d8", self.new_round, 21, 5, None],
            [self.hints_stats_frame, "Hints", "#ff8000", self.to_hints, 10, 0, 0],
            [self.hints_stats_frame, "Stats", "#333333", self.to_stats, 10, 0, 1],
            [self.game_frame, "End", "#990000", self.close_play, 21, 7, None]
        ]

        # create buttons and add to list
        control_ref_list = []
        for item in control_button_list:
            make_control_button = Button(item[0], text=item[1], bg=item[2],
                                         command=item[3], font=("Arial", 16, "bold"),
                                         fg="#ffffff", width=item[4])
            make_control_button.grid(row=item[5], column=item[6], padx=5, pady=5)
            control_ref_list.append(make_control_button)

        # retrieve next, stat and end button, so they can be configured
        self.next_button = control_ref_list[0]
        self.hints_button = control_ref_list[1]
        self.stats_button = control_ref_list[2]
        self.end_game_button = control_ref_list[3]

        self.stats_button.config(state=DISABLED)

        # once interface created, invoke new
        # round function for first round
        self.new_round()

    def new_round(self):
        """
        choose 4 colours works out median for score to beat
        """
        # retrieve number of rounds played add one to it and configure
        rounds_played = self.rounds_played.get()
        self.rounds_played.set(rounds_played)

        rounds_wanted = self.rounds_wanted.get()
        # set target score as median for comparison

        # get round colours and median
        self.round_colour_list, median, highest = get_round_colours()

        self.target_score.set(median)

        # Add the highest score to high score lists (for stats)
        self.highest_score_list.append(highest)

        # update heading, score, beat labels. hide result label
        self.heading_label.config(text=f"Round {rounds_played + 1} of {rounds_wanted}")
        self.target_label.config(text=f"Target Score: {median}", font=("Arial", "14", "bold"))
        self.results_label.config(text=f"{'=' * 7}", bg="#f0f0f0")

        # configure buttons with foregrounds and bg colour
        # enable colour buttons
        for count, item in enumerate(self.colour_button_ref):
            item.config(fg=self.round_colour_list[count][2],
                        bg=self.round_colour_list[count][0],
                        text=self.round_colour_list[count][0], state=NORMAL)
        self.next_button.config(state=DISABLED)

    def round_results(self, user_choice):
        """
        retrieves which button was pushed (index 0-3)
        retrieves score, compares it with median,
        updates results and adds it to stat list
        """

        # enable stats button
        self.stats_button.config(state=NORMAL)
        # get user score and colour on button press
        score = int(self.round_colour_list[user_choice][1])

        # Initialise variables (retrieve rounds won, played)
        rounds_won = self.rounds_won.get()
        rounds_played = self.rounds_won.get()

        # add one to number of rounds
        rounds_played += 1
        self.rounds_played.set(rounds_played)

        # alternate way to get button name.
        colour_name = self.colour_button_ref[user_choice].cget('text')

        # retrieve target score and compare with user score to find round result
        target = self.target_score.get()

        if score >= target:
            result_text = f"Success! {colour_name} earned you {score} points"
            result_bg = "#82b366"
            self.all_scores_list.append(score)
            rounds_won += 1
            self.rounds_won.set(rounds_won)
        else:
            result_text = f"Oops, {colour_name} ({score}) is less than set target"
            result_bg = "#F8CECC"
            self.all_scores_list.append(0)
        self.results_label.config(text=result_text, bg=result_bg)

        # enable stats and hints button, disable colour buttons
        self.next_button.config(state=NORMAL)
        self.stats_button.config(state=NORMAL)

        # check to see if game is over
        rounds_wanted = self.rounds_wanted.get()
        # code for game end

        if rounds_played == rounds_wanted:
            # work out success level
            success_rate = rounds_won / rounds_played * 100
            success_string = f"Success Rate: {rounds_won}/{rounds_played} ({success_rate:.0f}%)"

            # configure end game labels / buttons
            self.heading_label.config(text="Gave Over")
            self.target_label.config(text=success_string)
            self.choose_label.config(text="Please click stats button for more info")
            self.next_button.config(state=DISABLED, text="Game Over")
            self.stats_button.config(bg="#990000")
            self.end_game_button.config(text="Play Again", bg="#006600", compound="right", width=22)

            self.next_button.config(state=DISABLED, text="Game over")
            self.end_game_button.config(text="play again", bg="#006600")

        for item in self.colour_button_ref:
            item.config(state=DISABLED)

    def close_play(self):
        # reshow root and end current game
        root.deiconify()
        self.play_box.destroy()

    def to_hints(self):
        """
        Displays hints for playing game
        :return:
        """

        rounds_played = self.rounds_played.get()
        DisplayHints(self, rounds_played)

    def to_stats(self):
        """
        retrieves stats for playing game
        """
        # retrieve number of rounds
        # won as a number
        rounds_won = self.rounds_won.get()
        stats_bundle = [rounds_won, self.all_scores_list,
                        self.highest_score_list]

        Stats(self, stats_bundle)


class Stats:
    """
    Displays stats for Colour Quest Game
    """

    def __init__(self, partner, all_stats_info):

        # disable buttons prevent program crashing
        partner.hints_button.config(state=DISABLED)
        partner.end_game_button.config(state=DISABLED)
        partner.stats_button.config(state=DISABLED)
        # extract information from master list
        rounds_won = all_stats_info[0]
        user_scores = all_stats_info[1]
        high_scores = all_stats_info[2]

        # sort user scores to find high scores
        user_scores.sort()

        # setup dialogue box

        self.stats_box = Toplevel()
        # disable stat button
        partner.stats_button.config(state=DISABLED)

        # if users press cross at top, close help and release help button
        self.stats_box.protocol('WM_DELETE_WINDOW',
                                partial(self.close_stats, partner))

        self.stats_frame = Frame(self.stats_box, width=300, )
        self.stats_frame.grid()

        # math to populate stats dialogue
        rounds_played = len(user_scores)

        success_rate = rounds_won / rounds_played * 100
        total_score = sum(user_scores)
        max_possible = sum(high_scores)

        best_score = user_scores[-1]
        average_score = total_score / rounds_played

        # str for stats labels
        success_string = f"Success Rate: {rounds_won} / {rounds_played} ({success_rate:.0f}%)"
        total_score_string = f"Total Score: {total_score}"
        max_possible_string = f"max possible score: {max_possible} "
        best_score_string = f"best score: {best_score}"

        # custom text and formatting
        if total_score == max_possible:
            comment_string = "Amazing! highest score"
            comment_colour = "#d5e8d4"
        elif total_score == 0:
            comment_string = "blud ur a failure"
            comment_colour = "#f8cecc"
            best_score_string = "best score: n/a"
        else:
            comment_string = ""
            comment_colour = "#f0f0f0"

        average_score_string = f"Average score: {average_score:.0f}\n"

        heading_font = "Arial", "16", "bold"
        normal_font = "Arial", "14"
        comment_font = "Arial", "13"

        # Label list txt| font| str
        all_stats_strings = [
            ["Statistics", heading_font, ''],
            [success_string, normal_font, 'W'],
            [total_score_string, normal_font, 'W'],
            [max_possible_string, normal_font, 'W'],
            [comment_string, comment_font, 'W'],
            ["\nRound Stats", heading_font, ''],
            [best_score_string, normal_font, 'W'],
            [average_score_string, normal_font, 'W']

        ]

        stats_label_ref_list = []
        for count, item in enumerate(all_stats_strings):
            self.stats_label = Label(self.stats_frame, text=item[0], font=item[1],
                                     anchor='w', justify="left",
                                     padx=30, pady=5)
            self.stats_label.grid(row=count, sticky=item[2], padx=10)
            stats_label_ref_list.append(self.stats_label)

        # configure comment label background
        stats_comment_label = stats_label_ref_list[4]
        stats_comment_label.config(bg=comment_colour)

        self.dismiss_button = Button(self.stats_frame, font=("Arial", "14", "bold"),
                                     text="Dismiss", fg="#FFFFFF",
                                     bg="#333333", width=20, command=partial(self.close_stats, partner))
        self.dismiss_button.grid(row=8, padx=10, pady=10)

        # closes help dialogue

    def close_stats(self, partner):
        """
        Closes stats dialogue box (and enables stats button)
        """

        # put stats button back to normal
        partner.hints_button.config(state=NORMAL)
        partner.end_game_button.config(state=NORMAL)
        partner.stats_button.config(state=NORMAL)
        self.stats_box.destroy()


class DisplayHints:
    """
    Displays hints for Colour Quest Game
    """

    def __init__(self, partner, rounds_played):
        self.rounds_played = rounds_played
        # setup dialogue box
        background = "#ffe6cc"
        self.hint_box = Toplevel()

        # disable help stats and end game when extra window is opened
        partner.hints_button.config(state=DISABLED)
        partner.end_game_button.config(state=DISABLED)
        partner.stats_button.config(state=DISABLED)

        # disable hint button
        partner.hints_button.config(state=DISABLED)
        # if users press cross at top, close help and release help button
        self.hint_box.protocol('WM_DELETE_WINDOW',
                               partial(self.close_hint, partner))
        self.hint_frame = Frame(self.hint_box, width=300,
                                height=200)
        self.hint_frame.grid()
        self.hint_heading_label = Label(self.hint_frame,
                                        text="Hints",
                                        font=("Arial", "14", "bold"))
        self.hint_heading_label.grid(row=0)
        hint_text = "The score for each colour relates to it's hexadecimal code.\n" \
                    "Remember, the hex code for white is #FFFFFF - which is best" \
                    "possible score.\n" \
                    "The hex code for black is #000000 which is the worst possible score\n" \
                    "The first colour in the code is red, so if you had to choose" \
                    "between red (#FF0000), green(#00FF00) and blue (#0000FF), then" \
                    "red would be the best choice.\n" \
                    "Good luck!"
        self.hint_text_label = Label(self.hint_frame,
                                     text=hint_text, wraplength=350,
                                     justify="left")
        self.hint_text_label.grid(row=1, padx=10)
        self.dismiss_button = Button(self.hint_frame,
                                     font=("Arial", "12", "bold"),
                                     text="Dismiss", bg="#CC6600",
                                     fg="#FFFFFF",
                                     command=partial(self.close_hint, partner))
        self.dismiss_button.grid(row=2, padx=10, pady=10)
        # list and loop to set background colour on everything except the buttons.
        recolour_list = [self.hint_frame, self.hint_heading_label,
                         self.hint_text_label]
        for item in recolour_list:
            item.config(bg=background)

    def close_hint(self, partner):
        """
        Closes hint dialogue box (and enables hint button)
        """

        # put hint button back to normal
        partner.hints_button.config(state=NORMAL)
        partner.end_game_button.config(state=NORMAL)
        partner.stats_button.config(state=NORMAL)
        # only enable if one rounds has been played at least
        if self.rounds_played >= 1:
            partner.hints_button.config(state=NORMAL)
        self.hint_box.destroy()


# main_routine goes here
if __name__ == "__main__":
    root = Tk()
    root.title("Colour Quest")
    StartGame()
    root.mainloop()
